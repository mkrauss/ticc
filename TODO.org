
Fully prioritized TODO list

* DONE Command to mark a change complete
CLOSED: [2016-05-21 Sat 13:41]

In case a subplan is for any reason done without ticc being aware.
Command `ticc verify <change>` should run fund the minimum subplan to
deploy <change>, and for each Change run the verify script to confirm
it is legitimately deployed and mark it.

* DONE Command to move a change
CLOSED: [2016-05-04 Wed 00:12]

* TODO Multiple database targets in config

* TODO Multiple environments

- Config file specifies default and other environments
- Command line can choose environment
- Changes that are environment-specific
  - Should only be loaded to the plan when using that environment
  - Changes from outside an environment cannot depend on Changes from
    inside it.

* TODO Command to export effective plan to a file

For DBA review before production deploy, for example

* TODO Sync dependencies

Right now sync ignores when just dependencies are altered on a
deployed Change. It isn't necessary to re-deploy since it obviously
got deployed.

** TODO Just DB update clean dependency changes

When only the dependencies of a Change are different, they should be
directly updated in the deployed plan, since they are probably
correcting a dependency problem that might otherwise prevent revert.

** TODO Deal with messy dependency changes

In the event that DDL has also changed, the new dependencies may
reflect that change, may correct earlier dependency issues, or may do
both:

- Since the first case is most likely, we should probably do the
  revert based on the original dependencies
- We could try that and failing it try changing the dependencies first
  instead
- We may also need in a worst case where dependency corrections and
  new dependencies are combined to try the revert with all
  dependencies combined
- Even then, we may fail if the combined dependencies introduce
  problems such as circularity?

* TODO Better error reporting

** TODO Probably want a top level UserError exception

To consistently carry error details in a way that can be nicely
formatted

** TODO Nicely display errors

** TODO Provide better diagnostics on bad graphs

The topological_sort function can only tell if it runs out of sortable
elements; it cannot report if the reason is circular dependencies or a
bad dependency.

Another option here is to validate all dependencies before sorting, so
there is only one possible error when sorting.

* TODO Local config

Values that override the main config so that users can keep local
changes that do not get committed to a shared repo

* TODO Import/export option

** TODO Import from Sqitch

** TODO Export to Sqitch

* TODO Show plans

- dry-run, show the plan that would be followed for another command
- show the master plan
- show the currently deployed plan

* TODO Add 'license' option for displaying more of GPL license

* TODO Figure out a way to preserve json source

Would be nice to be able to modify a plan and write back the plan.json
with just the changed bits modified, leaving original whitespace
formatting. Consider hjson...

https://hjson.org/

Another option: give up json and use more strictly defined format(s).

Having played with HJSON there are some problems, principally:
- It changes the way we access config/plan values from arrays to
  objects.
- The HJSON library for PHP depends on having the mbstring module which is
  not installed by default on Debian/Ubuntu. (A good argument for
  rewriting in another language, but there are time pressures against
  that now.)

Consider refactoring current config/plan access to put it behind a
class that normalizes the way we load, access, modify and save
config/plan data, then adding optional support for HJSON as well as
other formats - some people actually like YML.

* TODO Allow Changes to specify DB role to be run as

Questionable value. Deployment should probably normally be run as a
superuser but maybe verify scripts could run as a limited role? Of
course SET ROLE is probably sufficient and has the benefit of being
explicit.
